const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const admin = require("firebase-admin");
const nodemailer = require("nodemailer");

initializeApp();

// const db = admin.firestore();
const firestore = admin.firestore();
/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>}
 * @throws {Error} - If an error occurs during the process.
 */
async function isAdminUser(email) {
  const firestore = getFirestore();
  const donorDoc = await firestore.
      collection("financial Institution").doc(email).get();
  return donorDoc.exists;
}
// Nodemailer transporter setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "nurturingdreamsfoundation@gmail.com",
    pass: "kakt hpql pdvw byid",
  },
});

// API endpoint to retrieve user information
exports.createLoanApplicationByfinancialInstitution = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const financialInstitution = decodedToken.email;
    const isAdmin = await isAdminUser(financialInstitution);
    if (!isAdmin) {
      return res.status(403).
          send("Only financial Institution can apply this Application");
    }
    const createdBy=financialInstitution;
    const {loanName, loanDetails, attachments} = req.body || {};

    // Check if all required fields are provided
    if (!loanName || !loanDetails || !createdBy) {
      return res.status(400).json({error: "Missing required fields"});
    }

    // Get current date
    const currentDate = new Date();
    const donorDoc = await firestore.
        collection("financial Institution").doc(financialInstitution).get();
    if (!donorDoc.exists) {
      return res.status(404).send("financial Institution details not found");
    }


    const donorData = donorDoc.data();
    const institutionName = donorData.institutionName;

    // Check if scholarship already exists
    const scholarshipRef = firestore.
        collection("loans").doc(loanName);
    const scholarshipDoc = await scholarshipRef.get();

    if (scholarshipDoc.exists) {
      // If scholarship already exists, return error
      return res.status(400).json({error: "Loans with the"+
      " same name already exists"});
    } else {
      let isAttachment = false; // Default value

      if (attachments && attachments.length > 0) {
        isAttachment = true;
      }
      // Create new scholarship
      await scholarshipRef.set({
        loanDetails,
        createdBy,
        createdDate: currentDate,
        status: "new",
        processedBy: "", // Default processedBy
        processedDate: "", // Default processedDate
        institutionName,
        attachments: attachments || [],
        isAttachment: isAttachment,
      });
      const mailOptions = {
        from: `"Nurturing Dreams Foundation" <
        nurturingdreamsfoundation@gmail.com>`,
        to: createdBy,
        subject: "Loan product application confirmation",
        html: `
          <p>Dear ${institutionName},</p>
          <p>Your loan product application
          has been successfully submitted.</p>
          <ul>
            <li><strong>Loan Name:</strong> ${loanName}</li>
            <li><strong>Loan Details:</strong> ${loanDetails}</li>
          </ul>
          <p>Thank you for your application.</p>
          <p><strong>Please note that your application is currently under review
          and has not been approved yet. Once approved by the admin,
          you will receive another email notification.</strong></p>
          <p>Sincerely,</p>
          <p><strong>Nurturing Dreams Foundation</strong></p>
        `,
      };

      transporter.sendMail(mailOptions, (error, info) => {
        if (error) {
          console.error("Error sending email:", error);
        } else {
          console.log("Email sent:", info.response);
        }
      });

      res.status(201).json({message: "Loan Application created successfully"});
    }
  } catch (error) {
    logger.error(error);
    res.status(500).json({error: "Internal Server Error"});
  }
});

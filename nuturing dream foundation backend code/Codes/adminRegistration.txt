// The Cloud Functions for Firebase SDK to create Cloud Functions and triggers.
const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const express = require("express");
const app = express();
const nodemailer = require("nodemailer");
const admin = require("firebase-admin");
const credentials = require("./key.json");
const {getFirestore} = require("firebase-admin/firestore");
// const cors = require("cors");
// Initialize Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert(credentials),
});
const db = admin.firestore();
const auth = admin.auth();

app.use(express.json());
app.use(express.urlencoded({extended: true}));


/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>}
 * @throws {Error} - If an error occurs during the process.
 */
async function isAdminUser(email) {
  const firestore = getFirestore();
  const adminDoc = await firestore.collection("admin").doc(email).get();
  return adminDoc.exists;
}

// Nodemailer transporter setup
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "nurturingdreamsfoundation@gmail.com",
    pass: "kakt hpql pdvw byid",
  },
});
/**
 * Validates an email address.
 * @param {string} email The email address to validate.
 * @return {boolean} `true` if the email is valid, otherwise `false`.
 */
function validateEmail(email) {
  const re = /\S+@\S+\.\S+/;
  return re.test(email);
}

/**
 * Validates a phone number.
 * @param {string} phoneNumber The phone number to validate.
 * @return {boolean} `true` if the phone number is valid, otherwise `false`.
 */
function validatePhoneNumber(phoneNumber) {
  const re = /^\d{10}$/;
  return re.test(phoneNumber);
}

const generateRandomPassword = () => {
  const length = 8;
  const charset = "abcdefghijklmnopqrstuvwxyzABCD"+
  "EFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let password = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset[randomIndex];
  }
  return password;
};
const createUser = async (email, password) => {
  {
    const userRecord = await auth.createUser({email: email, password});
    return userRecord;
  }
};

// HTTP endpoint for adding a new user registration
exports.adminRegistration = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    // Verify the ID token
    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(402).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const adminEmail = decodedToken.email;
    const isAdmin = await isAdminUser(adminEmail);
    if (!isAdmin) {
      return res.status(403).send("You are not authorized" +
        " to view user information");
    }
    const {userType, ...userData} = req.body;
    const {email, phoneNumber} = userData;

    // Validate email format and phone number length
    if (!validateEmail(email)) {
      return res.status(400).json({
        message: "Invalid email format. Your request failed. Please try again",
      });
    }

    if (!validatePhoneNumber(phoneNumber)) {
      return res.status(400).json({
        message:
          "Invalid phone number format. Phone number must "+
          "be 10 digits. Your request failed. Please try again",
      });
    }

    const currentDate = new Date();
    try {
      const snapshot = await db.collection("registrationApplications")
          .where("email", "==", email)
          .get();

      if (!snapshot.empty) {
        return res.status(400).json({
          message: "User already exists for this email",
        });
      }
    } catch (error) {
      console.error("Error checking for existing user:", error);
      return res.status(500).json({message: "Error checking"+
      "for existing user"});
    }

    // Set default details
    userData.status = "approve";
    userData.processedBy = adminEmail;
    userData.processedDate = currentDate;
    userData.submitDate = currentDate;
    userData.createdby=true;
    userData.paymentSuccess=true;
    userData.isFirstTime=true;
    // userData.userType = userType;

    // Determine user type and validate required fields accordingly
    let requiredFields = [];
    let userInfo = {};

    switch (userType) {
      case "student":
        requiredFields = [
          "firstName",
          "lastName",
          "phoneNumber",
          "email",
          "gender",
          "dateOfBirth",
          "address",
          "educationLevel",
          "courseSpecialization",
          "institution",
          "yearOfPassing",
          "notes",
          "university",
        ];
        if (!userData.otherInstitutionName) {
          userData.otherInstitutionName = "";
        } else {
          requiredFields.push("otherInstitutionName");
        }
        break;
      case "mentor":
        requiredFields = [
          "firstName",
          "lastName",
          "phoneNumber",
          "email",
          "gender",
          "dateOfBirth",
          "address",
          "specialization",
        ];
        break;
      case "institution":
      case "financial Institution":
        requiredFields = [
          "institutionName",
          "institutionType",
          "phoneNumber",
          "email",
          "address",
        ];
        break;
      case "donor":
        requiredFields = [
          "firstName",
          "lastName",
          "phoneNumber",
          "email",
          "gender",
          "dateOfBirth",
          "address",
          "notes",
          "donorType",
        ];
        break;
      default:
        return res.status(400).json({message: "Invalid user type"});
    }

    const missingFields = requiredFields.filter(
        (field) => !Object.prototype.hasOwnProperty.call(userData, field),
    );

    if (missingFields.length > 0) {
      return res.status(400).json({
        message: `Missing required fields for ${userType}: ${missingFields.join(
            ", ",
        )}. Your request failed. Please try again`,
      });
    }
    switch (userType) {
      case "student":
        userInfo = {
          userType: "student",
          firstName: userData.firstName,
          lastName: userData.lastName,
          phoneNumber: userData.phoneNumber,
          email: userData.email,
          gender: userData.gender,
          dateOfBirth: userData.dateOfBirth,
          address: userData.address,
          educationLevel: userData.educationLevel,
          courseSpecialization: userData.courseSpecialization,
          institution: userData.institution,
          yearOfPassing: userData.yearOfPassing,
          notes: userData.notes,
          university: userData.university,
          otherInstitutionName: userData.otherInstitutionName || "",
          ...userData,
          attachments: userData.attachments || [],
        };
        break;
      case "mentor":
        userInfo = {
          userType: "mentor",
          firstName: userData.firstName,
          lastName: userData.lastName,
          phoneNumber: userData.phoneNumber,
          email: userData.email,
          gender: userData.gender,
          dateOfBirth: userData.dateOfBirth,
          address: userData.address,
          ...userData,
          specialization: userData.specialization,
        };
        break;
      case "institution":
      case "financial Institution":
        userInfo = {
          userType,
          institutionName: userData.institutionName,
          institutionType: userData.institutionType,
          phoneNumber: userData.phoneNumber,
          email: userData.email,
          ...userData,
          address: userData.address,
        };
        break;
      case "donor":
        userInfo = {
          userType: "donor",
          firstName: userData.firstName,
          lastName: userData.lastName,
          phoneNumber: userData.phoneNumber,
          email: userData.email,
          gender: userData.gender,
          dateOfBirth: userData.dateOfBirth,
          address: userData.address,
          ...userData,
          donorType: userData.donorType,
          attachments: userData.attachments || [],
        };
        break;
    }

    // Store registration details in Firestore
    await db
        .collection(userType)
        .doc(email)
        .set(userInfo);
    // Store registration details in registration table
    await db
        .collection("registrationApplications")
        .doc(email)
        .set(userInfo);

    // Log success
    logger.info(`${userType} registration application submitted successfully`);

    // Send success response
    res.status(201).json({
      message: `${userType} registration application submitted successfully`,
    });
    console.log(email);

    const recipientName = userData.firstName ||
    userData.institutionName || "User";
    // Send email to the user
    const password = generateRandomPassword();
    await createUser(email, password);
    const mailOptions = {
      from: `"Nurturing Dreams Foundation" <
      nurturingdreamsfoundation@gmail.com>`,
      to: email,
      subject: "Congratulations! Your application has been approved.",
      html: `<p>Dear ${recipientName},</p>
        <p>Congratulations! Your application has been approved
        for registration. We are delighted to welcome you to
        our community and you can now access our platform and
        explore a range of exciting offers.</p>
        <p>Your account username is: <strong>${email}</strong></p>
        <p>Your account password is: <strong>${password}</strong></p>

        <p>You can now log in using above username and password. Remember,
         you can reset your password after logging in.</p>

        <p>Best regards,<br>
        <strong>Nurturing Dreams Foundation</strong></p>`,
    };
    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error("Error sending email:", error);
      } else {
        console.log("Email sent:", info.response);
      }
    });
  } catch (error) {
    // Log error
    logger.error(`Error submitting registration application: ${error}`);

    // Handle errors
    res.status(500).json({message: "Internal Server Error"});
  }
});

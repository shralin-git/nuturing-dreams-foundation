
const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
// const {getFirestore} = require("firebase-admin/firestore");
const axios = require("axios");
// const cors = require("cors");
initializeApp();

const API_KEY = "AIzaSyAxPTIiH0ubjokB7zXlL0cRKEzH5_vIUdA";

// const bodyParser = require('body-parser');

// Endpoint to exchange refresh token for new ID token
exports.refreshToken = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    const {refreshtoken} = req.body;

    // Check if refresh token is provided
    if (!refreshtoken) {
      return res.status(400).json({message: "Refresh token is"+
      "required please try again"});
    }

    // Exchange refresh token for new ID token
    const exchangeResponse =
    await axios.post(`https://securetoken.googleapis.com/v1/token?key=${API_KEY}`, {
      grant_type: "refresh_token",
      refresh_token: refreshtoken,
    });

    // const {expires_in, id_token} = exchangeResponse.data;
    // const {idToken} = exchangeResponse.data.id_token;
    // const {expiresIn} =exchangeResponse.data.expires_in;
    res.status(200).json(exchangeResponse.data);
  } catch (error) {
    logger.error("Error exchanging refresh token:", error.message);
    // Check specific error codes and handle them accordingly
    if (error.response && error.response.data && error.response.data.error) {
      const errorCode = error.response.data.error.message;
      if (errorCode === "TOKEN_EXPIRED") {
        return res.status(401).json({message: "The user's credential is no"+
        " longer valid. The user must sign in again."});
      } else if (errorCode === "USER_DISABLED") {
        return res.status(402).json({message: "The user account has"+
        "been disabled by an administrator."});
      } else if (errorCode === "USER_NOT_FOUND") {
        return res.status(403).json({message: "The user corresponding"+
        " to the refresh token was not found."+
        " It is likely the user was deleted."});
      } else if (errorCode === "INVALID_REFRESH_TOKEN") {
        return res.status(404).json({message: "An invalid refresh"+
        " token is provided please try again."});
      } else if (errorCode === "MISSING_REFRESH_TOKEN") {
        return res.status(405).json({message: "No refresh token"+
        " provided please try again."});
      } else if (errorCode === "PROJECT_NUMBER_MISMATCH") {
        return res.status(406).json({message: "The project number of the"+
        " refresh token does not match that of the API key provided"+
        "please try again."});
      } else if (errorCode === 400) {
        return res.status(400).json({message: "bad_request"});
      }
    }
    res.status(500).json({message: "Internal server error"});
  }
});

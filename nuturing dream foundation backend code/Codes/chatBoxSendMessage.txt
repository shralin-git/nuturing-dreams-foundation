const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");

const admin = require("firebase-admin");
const {getFirestore} = require("firebase-admin/firestore");
const {initializeApp} = require("firebase-admin/app");
initializeApp();

// Initialize Firestore
const db = getFirestore();

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

// Cloud Function to handle HTTP requests
exports.chatBoxSendMessage = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const senderEmail = decodedToken.email;
    const receiverEmail = req.body.receiverEmail;
    const message = req.body.message;

    // Check if receiverEmail exists in the request body
    if (!receiverEmail) {
      return res.status(400).send("Receiver email is missing");
    }
    // Check if senderEmail is the same as receiverEmail
    if (senderEmail === receiverEmail) {
      return res.status(400).send("You cannot send a" +
      " message to yourself");
    }

    // Construct conversation ID for sender
    const senderChatRef = db.collection("chats").
        doc(senderEmail);
    const senderConversationRef = senderChatRef.
        collection(receiverEmail).doc("messages");

    // Construct conversation ID for receiver
    const receiverChatRef = db.collection("chats").
        doc(receiverEmail);
    const receiverConversationRef = receiverChatRef.
        collection(senderEmail).doc("messages");

    // Update conversation document for the sender
    try {
      const senderDoc = await senderConversationRef.get();
      const senderMessages = senderDoc.exists ? senderDoc.
          data().messages || [] : [];
      const timestamp = new Date();
      senderMessages.push({
        createdAt: timestamp,
        from: senderEmail,
        message: message,
        isRead: true, // Sender's message is always marked as read
      });
      await senderConversationRef.set({messages: senderMessages});
    } catch (error) {
      console.error("Error adding message to sender conversation:", error);
      return res.status(500).send("Internal Server Error");
    }

    // Update conversation document for the receiver
    try {
      const receiverDoc = await receiverConversationRef.get();
      const receiverMessages = receiverDoc.exists ? receiverDoc.
          data().messages || [] : [];
      const timestamp = new Date();
      receiverMessages.push({
        createdAt: timestamp,
        from: senderEmail,
        message: message,
        isRead: false, // Receiver's message is initially marked as unread
      });
      await receiverConversationRef.set({messages: receiverMessages});
    } catch (error) {
      console.error("Error adding message to receiver conversation:", error);
      return res.status(500).send("Internal Server Error");
    }

    // Return success response
    res.status(200).send("Message sent successfully");
  } catch (error) {
    logger.error("Error:", error);
    res.status(500).send("Internal Server Error");
  }
});


const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");

const admin = require("firebase-admin");
const {getFirestore} = require("firebase-admin/firestore");
const {initializeApp} = require("firebase-admin/app");
initializeApp();

// Initialize Firestore
const db = getFirestore();

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

exports.getcount = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const userEmail = decodedToken.email;


    const email = req.query.email;

    // Construct conversation ID for the requested user
    const chatRef = db.collection("chats").doc(userEmail);
    const conversationRef = chatRef.collection(email).doc("messages");

    // Retrieve all messages from the conversation
    const conversationDoc = await conversationRef.get();
    if (!conversationDoc.exists) {
      return res.status(404).send("Conversation not found");
    }

    // Get the messages and count unread messages
    const messages = conversationDoc.data().messages || [];
    const unreadMessagesCount = messages.reduce((count, message) => {
      if (!message.isRead &&
        message.from !== userEmail) {
        return count + 1;
      }
      return count;
    }, 0);

    // Update all messages to mark them as read
    if (unreadMessagesCount > 0) {
      const updatedMessages = messages.map((message) => ({
        ...message,
        isRead: true,
      }));

      await conversationRef.update({messages: updatedMessages});
    }

    res.status(200).json({unreadMessagesCount});
  } catch (error) {
    logger.error("Error:", error);
    res.status(500).send("Internal Server Error");
  }
});

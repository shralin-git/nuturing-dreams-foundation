const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const admin = require("firebase-admin");

initializeApp();

const db = admin.firestore();

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin, student, mentor, or donor.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<string|null>} -
 * @throws {Error} - If an error occurs during the process.
 */
async function getUserRole(email) {
  const firestore = getFirestore();
  const adminDoc = await firestore.collection("admin").doc(email).get();
  if (adminDoc.exists) {
    return "admin";
  }

  const studentDoc = await firestore.collection("student").doc(email).get();
  if (studentDoc.exists) {
    return "student";
  }

  const mentorDoc = await firestore.collection("mentor").doc(email).get();
  if (mentorDoc.exists) {
    return "mentor";
  }

  const donorDoc = await firestore.collection("donor").doc(email).get();
  if (donorDoc.exists) {
    return "donor";
  }

  return null; // User not found in any role.
}

/**
 * Checks if the specified end time has expired.
 *
 * @param {number} endTime - The end time to check.
 * @return {boolean} - True if the end time has expired, false otherwise.
 */
function isEndTimeExpired(endTime) {
  const currentTime = Math.floor(Date.now() / 1000);
  console.log("Current Time:", currentTime);
  console.log("End Time:", endTime);
  return currentTime > endTime;
}

exports.getDiscussionTopics = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    const userEmail = decodedToken.email;
    const userRole = await getUserRole(userEmail);
    if (!userRole) {
      return res.status(403).
          send("You are not authorized to view user information");
    }

    // Allow access if the user is admin, student, mentor, or donor
    const topicsSnapshot = await db.collection("DiscussionForum").get();
    const topics = [];

    topicsSnapshot.forEach((doc) => {
      const topicData = doc.data();
      const endTime = topicData.endTime;
      const isExpired = isEndTimeExpired(endTime);
      topics.push({
        id: doc.id,
        title: topicData.title,
        createdAt: topicData.createdAt,
        isExpired: isExpired,
      });
    });

    res.json(topics);
  } catch (error) {
    logger.error("Error retrieving topics: ", error);
    res.status(500).json({error: "Failed to retrieve topics"});
  }
});

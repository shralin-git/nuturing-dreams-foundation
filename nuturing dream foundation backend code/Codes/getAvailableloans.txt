const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const admin = require("firebase-admin");

initializeApp();

const db = admin.firestore();

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin or a student.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>} - Returns.
 * @throws {Error} - If an error occurs during the process.
 */
async function isAuthorizedUser(email) {
  const firestore = getFirestore();

  // Check if the user is an admin
  const adminDoc = await firestore.collection("admin").doc(email).get();
  if (adminDoc.exists) {
    return true;
  }

  // Check if the user is a student
  const studentDoc = await firestore.collection("student").doc(email).get();
  if (studentDoc.exists) {
    return true;
  }

  // Check if the user is a donor
  const donorDoc = await firestore.
      collection("financial Institution").doc(email).get();
  if (donorDoc.exists) {
    return true;
  }

  // If the user is neither admin nor student nor donor
  return false;
}

// API endpoint to retrieve user information
exports.getAvailableloans = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }
    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const adminEmail = decodedToken.email;
    const isAdmin = await isAuthorizedUser(adminEmail);
    if (!isAdmin) {
      return res.status(403).
          send("You are not authorized to access this resource");
    }

    const status = req.query.status || "approve";
    let loansRef = db.collection("loans");

    // Check if status is provided and handle accordingly
    if (status.toLowerCase() === "all") {
      // If status is "all", return all loans
      const snapshot = await loansRef.get();
      const loans = snapshot.docs.
          map((doc) => ({id: doc.id, isAttachment: doc.data().isAttachment}));
      res.json(loans);
    } else {
      // Otherwise, return loans with specified status
      loansRef = loansRef.where("status", "==", status.toLowerCase());
      const snapshot = await loansRef.get();
      const loans = snapshot.docs.
          map((doc) => ({id: doc.id, isAttachment: doc.data().isAttachment}));
      res.json(loans);
    }
  } catch (error) {
    logger.error("Error fetching loans:", error);
    res.status(500).json({error: "Failed to fetch loans"});
  }
});

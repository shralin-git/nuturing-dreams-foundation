const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {Storage} = require("@google-cloud/storage");
const {initializeApp} = require("firebase-admin/app");
const admin = require("firebase-admin");
const {getFirestore} = require("firebase-admin/firestore");
initializeApp();

const storage = new Storage();
const bucket = storage.bucket("nurturingdreamsfoundatio-451b5");

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin or a student.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>} - Returns.
 * @throws {Error} - If an error occurs during the process.
 */
async function isAuthorizedUser(email) {
  const firestore = getFirestore();

  // Check if the user is an admin
  const adminDoc = await firestore.collection("admin").doc(email).get();
  if (adminDoc.exists) {
    return true;
  }

  // Check if the user is a student
  const studentDoc = await firestore.collection("student").doc(email).get();
  if (studentDoc.exists) {
    return true;
  }
  // Check if the user is a student
  const DonorDoc = await firestore.collection("donor").doc(email).get();
  if (DonorDoc.exists) {
    return true;
  }

  // If the user is neither admin nor student
  return false;
}

/**
 * Generates a shareable download URL for a file from Firebase.
 * @param {string} username - The path to the file in your bucket.
 * @param {string} filename - The path to the file in your bucket.
 * @param {number} expirationSeconds - The expiration time.
 * @return {Promise<string>} - The download URL.
 * @throws {Error} - If the file does not exist.
 */
async function getDownloadURL(username, filename, expirationSeconds) {
  try {
    const file = bucket.file(`${username}/${filename}`);
    const [url] = await file.getSignedUrl({
      action: "read",
      expires: Date.now() + expirationSeconds * 1000,
    });
    if (!url) {
      throw new Error("File not found");
    }
    return url;
  } catch (error) {
    logger.error("Error generating download URL:", error);
    throw error;
  }
}

exports.getFilesByEmailAndFilename = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }
    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const adminEmail = decodedToken.email;
    const isAdmin = await isAuthorizedUser(adminEmail);
    if (!isAdmin) {
      return res.status(403).
          send("You are not authorized to access this resource");
    }
    const {username, filename} = req.query;
    if (!username || !filename) {
      return res.status(400).
          json({error: "Username and filename are required"});
    }

    try {
      const downloadURL =
        await getDownloadURL(username, filename, 600);
      res.status(200).json({downloadURL});
    } catch (error) {
      if (error.message === "File not found") {
        return res.status(404).json({error: "File not found"});
      } else {
        throw error; // rethrow other errors
      }
    }
  } catch (error) {
    logger.error("Error retrieving filenames:", error);
    res.status(500).json({error: "Internal Server Error"});
  }
});

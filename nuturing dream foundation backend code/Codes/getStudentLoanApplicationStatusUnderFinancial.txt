const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const admin = require("firebase-admin");

initializeApp();

const db = admin.firestore();

// const firestore = admin.firestore();
/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin or donor.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>}
 * @throws {Error} - If an error occurs during the process.
 */
async function isAuthorizedUser(email) {
  const firestore = getFirestore();
  const financialInstitutionDoc = await firestore.
      collection("financial Institution").doc(email).get();
  return financialInstitutionDoc.exists;
}

exports.getStudentLoanApplicationStatusUnderFinancial = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    const status = req.query.status;
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    const userEmail = decodedToken.email;
    const isAuthorized = await isAuthorizedUser(userEmail);
    if (!isAuthorized) {
      return res.status(403).send("You are not authorized" +
        " to view user information");
    }
    const loansQuerySnapshot = await db
        .collection("loans")
        .where("createdBy", "==", userEmail)
        .get();

    const loanId = loansQuerySnapshot.docs.map((doc) => doc.id);

    if (loanId.length === 0) {
      // Return an empty response or handle it accordingly
      res.status(200).json({userDetails: []});
    }

    const userDetails = [];
    const subCollectionQuerySnapshot = await db
        .collection("loanApplications")
        .listDocuments();

    for (const docRef of subCollectionQuerySnapshot) {
      const scholarshipIdsSnapshot = await docRef
          .collection("loanIds")
          .where("product", "in", loanId)
          .get();
      scholarshipIdsSnapshot.forEach((doc) => {
        const loanData = doc.data();
        if (status === "all" && loanData.status !== "new" ||
          (status === "approve" &&
      loanData.status === "approve") || (status === "hold" &&
      loanData.status === "hold") || (status === "reject" &&
      loanData.status === "reject")) {
          userDetails.push({id: doc.id, data: loanData});
        }
      });
    }
    res.status(200).json({userDetails});
  } catch (error) {
    logger.error(error);
    res.status(500).json({message: "Internal Server Error"});
  }
});

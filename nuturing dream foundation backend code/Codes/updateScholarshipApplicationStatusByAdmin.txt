const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const admin = require("firebase-admin");
const nodemailer = require("nodemailer");

initializeApp();
const db = admin.firestore();
// const db = admin.firestore();
// const firestore = admin.firestore();
/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>}
 * @throws {Error} - If an error occurs during the process.
 */
async function isAdminUser(email) {
  const firestore = getFirestore();
  const adminDoc = await firestore.collection("admin").doc(email).get();
  return adminDoc.exists;
}

const sendMail = async (mailOptions) => {
  try {
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "nurturingdreamsfoundation@gmail.com",
        pass: "kakt hpql pdvw byid",
      },
    });
    await transporter.sendMail(mailOptions);
  } catch (error) {
    logger.error("Error sending email:", error);
    throw error;
  }
};
// API endpoint to retrieve user information
exports.updateScholarshipApplicationStatusByAdmin = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }
    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }
    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const adminEmail = decodedToken.email;
    const isAdmin = await isAdminUser(adminEmail);
    if (!isAdmin) {
      return res.status(403).send("You are not authorized" +
        " to view user information");
    }

    const {username, scholarshipId, status, remarks=""} = req.body;

    if (!username || !scholarshipId || !status) {
      return res.status(400).json({message: "All fields are required"});
    }

    const processedBy = adminEmail;
    const processedDate = new Date();

    await db.collection("scholarshipApplications").doc(username)
        .collection("scholarshipIds").doc(scholarshipId).update({
          status,
          processedBy,
          processedDate,
          remarks,
        });
    const scholarshipRef = db.collection("scholarshipApplications")
        .doc(username)
        .collection("scholarshipIds").doc(scholarshipId);
    const scholarshipDoc = await scholarshipRef.get();

    if (!scholarshipDoc.exists) {
      return res.status(404).json({error: "Scholarship not found for Email"});
    }
    const {type, product} = scholarshipDoc.data();

    // Fetch first name from registrationapplication table
    const registrationAppRef = db.
        collection("student").doc(username);
    const registrationAppDoc = await registrationAppRef.get();
    const firstName = registrationAppDoc.exists ? registrationAppDoc.
        data().firstName : "User";

    const mailOptions = {
      from: `"Nurturing Dreams Foundation" <
      nurturingdreamsfoundation@gmail.com>`,
      to: username,
      subject: status === "approve" ? "Scholarship application approved" :
        (status === "reject" ? "Scholarship application rejected" :
          "Scholarship application on hold"),
      html: (() => {
        let message;
        if (status === "approve") {
          message = `<p>Dear ${firstName},</p><p><br></p><p>Congratulations!`+
          ` Your <strong>${type}</strong> scholarship application for the`+
           ` following details has been approved:</p><p><br></p><p><strong>
           Scholarship ID:</strong> ${scholarshipId}</p><p><strong>
           Scholarship product:</strong> ${product}</p>${remarks ? `<p>
           <strong>remarks:</strong> ${remarks}</p>` : ""}`;
        } else if (status === "reject") {
          message = `<p>Dear ${firstName},</p><p><br>
          </p><p>We regret to inform you that your
          <strong>${type}</strong> scholarship application for the
           following details has been rejected:
          </p><p><br></p><p><strong>
          Scholarship ID:</strong> ${scholarshipId}</p><p>
          <strong>Scholarship product:</strong>
           ${product}</p>${remarks ? `<p>
          <strong>remarks:</strong> ${remarks}</p>` : ""}`;
        } else {
          message = `<p>Dear ${firstName},</p><p><br></p><p>Your
          <strong>${type}</strong>
          scholarship application for the following details
           is on hold:</p><p><br></p><p><strong>
           Scholarship ID:</strong> ${scholarshipId}
           </p><p><strong>Scholarship
           product:</strong> ${product}</p>${remarks ? `<p>
           <strong>remarks:</strong> ${remarks}</p>` : ""}`;
        }
        message += "<p><br></p><p>Best Regards,"+
        "<br><strong>Nurturing Dreams Foundation</strong></p>";
        return message;
      })(),
    };

    await sendMail(mailOptions);

    res.status(200).json({message: "Scholarship"+
    " application verified successfully"});
  } catch (error) {
    logger.error(error);
    res.status(500).json({message: "Internal Server Error"});
  }
});

const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const axios = require("axios");
// const cors = require("cors");

const API_KEY = "AIzaSyAxPTIiH0ubjokB7zXlL0cRKEzH5_vIUdA";

const logIn = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    const {username, password} = req.body;
    logger.info(username);
    logger.info(password);
    if (!username || !password) {
      logger.error("Username and password are required." +
        "Your request failed. Please try again.");
      return res.status(401).json({
        message: "Username and password are required." +
          " Your request failed. Please try again.",
      });
    }

    // Retrieve user data from multiple tables
    const userData = await retrieveUserData(username);
    if (!userData) {
      logger.error("User not found. Please register first.");
      return res.status(404).json({
        message: "User not found. Please register first.",
      });
    }

    const {data} = userData;
    // Perform user sign-in
    const signInData = await signInUser(username, password);

    // Prepare response object
    const response = {
      message: "Login successful",
      idToken: signInData.idToken,
      refreshToken: signInData.refreshToken,
      idTokenExpiresIn: signInData.idTokenExpiresIn,
      username: username,
      userType: data.userType,
      firstName: data.firstName,
      lastName: data.lastName,
      isFirstTime: data.isFirstTime,
    };
    // Check if institutionName is present in data object
    if (data.institutionName !== undefined) {
      response.institutionName = data.institutionName;
    }
    // Send response
    res.status(200).json(response);
  } catch (error) {
    logger.error("Error signing in user:", error.message);
    if (error.message === "INVALID_LOGIN_CREDENTIALS") {
      // Send a 500 status code for invalid username or password
      res.status(212).json({
        message: "Invalid username or password",
      });
    } else {
      // For other errors, send a 500 status code with a generic error message
      res.status(501).json({
        message: "An error occurred while signing in. Please try again.",
      });
    }
  }
});

// Initialize Firebase Admin SDK
initializeApp();

// HTTP endpoint for handling user login
exports.login = logIn;

/**
 * Sign in user using Firebase Authentication and retrieve additional user data.
 * @param {string} username - The user's email (username).
 * @param {string} password - The user's password.
 * @return {Promise<object>} - An object containing user data.
 * @throws {Error} - Throws an error if sign-in fails .
 */
async function signInUser(username, password) {
  try {
    const signInResponse = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API_KEY}`, {
      email: username,
      password,
      returnSecureToken: true,
    });
    return signInResponse.data;
  } catch (error) {
    if (error.response && error.response.data && error.response.data.error) {
      const errorCode = error.response.data.error.code;
      if (errorCode === "INVALID_PASSWORD" || errorCode === "EMAIL_NOT_FOUND") {
        // Invalid credentials error
        throw new Error("Invalid username or password");
      } else {
        // Other errors
        throw new Error(error.response.data.error.message);
      }
    } else {
      throw new Error("An error occurred during sign-in");
    }
  }
}


/**
 * Retrieve user data from multiple Firestore collections based on the provided.
 * @param {string} username - The user's username.
 * @return {Promise<{table: string, data: object} | null>}
 */
async function retrieveUserData(username) {
  const tables = ["mentor", "student", "donor",
    "financial Institution", "admin", "institution"];

  for (const table of tables) {
    const userDoc = await getFirestore().collection(table).doc(username).get();
    if (userDoc.exists) {
      return {table, data: userDoc.data()};
    }
  }

  return null;
}

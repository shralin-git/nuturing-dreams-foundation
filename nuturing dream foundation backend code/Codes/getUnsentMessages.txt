const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const admin = require("firebase-admin");
const {getFirestore} = require("firebase-admin/firestore");
const {initializeApp} = require("firebase-admin/app");
initializeApp();

// Initialize Firestore
const db = getFirestore();

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}


exports.getUnsentMessages = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(401).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const userEmail = decodedToken.email;

    // Construct conversation ID for the user
    const userChatRef = db.collection("chats").doc(userEmail);

    // Initialize count of unread messages
    let unreadCount = 0;

    // Retrieve all conversations for the user
    const conversationsSnapshot = await userChatRef.listCollections();

    // Iterate through each conversation and count unread messages
    for (const collectionRef of conversationsSnapshot) {
      // const conversationId = collectionRef.id;
      const conversationRef = collectionRef.doc("messages");

      // Get conversation document
      const conversationDoc = await conversationRef.get();
      if (conversationDoc.exists) {
        const conversationData = conversationDoc.data();
        if (Array.isArray(conversationData.messages)) {
          // Count unread messages
          unreadCount += conversationData.messages.
              filter((message) => !message.isRead &&
              message.from !== userEmail).length;
        }
      }
    }

    // Return the count of unread messages
    res.status(200).json({message: unreadCount});
  } catch (error) {
    logger.error("Error:", error);
    res.status(500).send("Internal Server Error");
  }
});

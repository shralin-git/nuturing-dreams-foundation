const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const admin = require("firebase-admin");
const {getFirestore} = require("firebase-admin/firestore");
initializeApp();
const db = admin.firestore();
const firestore = admin.firestore();
/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}

/**
 * Checks if a user is an admin.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<boolean>}
 * @throws {Error} - If an error occurs during the process.
 */
async function isAdminUser(email) {
  const firestore = getFirestore();
  const InstitutionDoc = await firestore.
      collection("institution").doc(email).get();
  return InstitutionDoc.exists;
}

exports.getScholarshipDeatilsUnderInstitution = onRequest({
  region: "asia-south1",
  cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    // Verify the ID token
    let decodedToken;
    try {
      decodedToken = await verifyToken(idToken);
    } catch (error) {
      if (error.code === "auth/id-token-expired") {
        return res.status(402).send("ID token has expired");
      }
      return res.status(401).send("Invalid ID token");
    }

    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    // Extract user information from the token
    const adminEmail = decodedToken.email;
    const isAdmin = await isAdminUser(adminEmail);
    if (!isAdmin) {
      return res.status(403).send("You are not authorized" +
        " to view user information");
    }

    // Retrieve institution name based on admin's email
    const institutionSnapshot = await firestore.
        collection("institution").doc(adminEmail).get();
    if (!institutionSnapshot.exists) {
      return res.status(404).send("Institution not found for admin");
    }
    const institutionData = institutionSnapshot.data();
    const institutionName = institutionData.institutionName;

    const usernames = [];
    const userDetails = [];

    const status = req.query.status; // Get the status from request query

    const studentQuerySnapshot = await db.
        collection("student").where("institution", "==", institutionName).get();

    studentQuerySnapshot.forEach((doc) => {
      usernames.push(doc.id);
    });
    // Add an additional query to check otherInstitutionName field
    const otherInstitutionQuerySnapshot = await db.collection("student")
        .where("otherInstitutionName", "==", institutionName)
        .get();

    otherInstitutionQuerySnapshot.forEach((doc) => {
      usernames.push(doc.id);
    });

    for (const username of usernames) {
      let scholarshipDocsQuery = db
          .collection("scholarshipApplications")
          .doc(username)
          .collection("scholarshipIds");

      if (status === "all") {
        scholarshipDocsQuery = scholarshipDocsQuery.
            where("status", "!=", "new");
      } else {
        scholarshipDocsQuery = scholarshipDocsQuery.
            where("status", "==", status);
      }

      const scholarshipDocs = await scholarshipDocsQuery.get();

      scholarshipDocs.forEach((doc) => {
        userDetails.push({id: doc.id, data: doc.data()});
      });
    }
    res.status(200).json({userDetails});
  } catch (error) {
    logger.error(error);
    res.status(500).json({message: "Internal Server Error"});
  }
});

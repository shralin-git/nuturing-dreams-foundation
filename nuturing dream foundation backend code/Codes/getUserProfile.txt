const {logger} = require("firebase-functions");
const {onRequest} = require("firebase-functions/v2/https");
const {initializeApp} = require("firebase-admin/app");
const {getFirestore} = require("firebase-admin/firestore");
const admin = require("firebase-admin");
initializeApp();

/**
 * Verifies an authentication token.
 *
 * @param {string} idToken - The ID token to verify.
 * @return {Promise<object>} - Decoded token information.
 * @throws {Error} - If verification fails.
 */
async function verifyToken(idToken) {
  const decodedToken = await admin.auth().verifyIdToken(idToken);
  return decodedToken;
}


/**
* Retrieves user information from Firestore.
*
* @param {string} username - The username to retrieve information for.
* @return {Promise<object|null>} - User data if found, or `null` if not.
* @throws {Error} - If an error occurs during the process.
*/
async function getUserInfo(username) {
  const firestore = getFirestore();
  const tablesToCheck = ["mentor", "student",
    "donor", "institution", "financial Institution"];

  for (const table of tablesToCheck) {
    const userDoc = await firestore.collection(table).doc(username).get();
    if (userDoc.exists) {
      return {...userDoc.data(), userType: table};
    }
  }

  return null;
}

/**
 * Checks if a user is an admin, student, mentor, or donor.
 *
 * @param {string} email - The email address of the user.
 * @return {Promise<string|null>} -
 * @throws {Error} - If an error occurs during the process.
 */
async function getUserRole(email) {
  const firestore = getFirestore();
  const adminDoc = await firestore.collection("admin").doc(email).get();
  if (adminDoc.exists) {
    return "admin";
  }

  const studentDoc = await firestore.collection("student").doc(email).get();
  if (studentDoc.exists) {
    return "student";
  }

  const mentorDoc = await firestore.collection("mentor").doc(email).get();
  if (mentorDoc.exists) {
    return "mentor";
  }

  const donorDoc = await firestore.collection("donor").doc(email).get();
  if (donorDoc.exists) {
    return "donor";
  }

  const institutionDoc = await firestore.
      collection("institution").doc(email).get();
  if (institutionDoc.exists) {
    return "institution";
  }
  const financialInstitutionDoc = await firestore.
      collection("financial Institution").doc(email).get();
  if (financialInstitutionDoc.exists) {
    return "financial Institution";
  }

  return null;
}

exports.getUserProfile = onRequest({
  region: "asia-south1", cors: true,
}, async (req, res) => {
  try {
    // Extract the ID token from the request headers
    const idToken = req.headers.authorization;
    if (!idToken) {
      return res.status(400).send("ID token is missing");
    }

    // Verify the ID token
    const decodedToken = await verifyToken(idToken);
    if (!decodedToken) {
      return res.status(401).send("Invalid ID token");
    }

    const userEmail = decodedToken.email;
    const userRole = await getUserRole(userEmail);
    if (!userRole) {
      return res.status(403).
          send("You are not authorized to view user information");
    }
    const username = (req.query.username);
    const userInfo = await getUserInfo(username);

    if (userInfo) {
      res.status(200).json(userInfo);
    } else {
      res.status(404).json({message: "User not found."});
    }
  } catch (error) {
    logger.error("Error retrieving user information:", error);
    res.status(500).json({message: "Internal server error."});
  }
});
